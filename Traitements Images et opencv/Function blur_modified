////////////**************   Function blur améliorée : 
//// *******Filtre Flou Gaussien  5x5 répété 'k' fois, sur le méme endroit. k=20(premuère boucle for())


void CIma::blur(unsigned char * ImrgbPtr, int Larg, int Haut)
{
	int colorIdx = 0;
	int x00, x01, x02, x03, x04, x10, x11, x12, x13, x14, x20, x21, x22, x23, x24, x30, x31, x32, x33, x34, x40, x41, x42, x43, x44;
	for (int k = 0; k < 20; k++) {  ////********* boucle qui refait le traitement 'k' fois, afin d'intensifier le résultat du filtre 
                                  ////*********   donc avoir une image plus flouté.
		for (int i = 0; i < Haut - 4; i++) {
			for (int j = 0; j < Larg - 4; j++) {
				for (colorIdx = 0; colorIdx < 3; colorIdx++) {
					x00 = (i * Larg + j) * 3 + colorIdx;
					x01 = (i * Larg + (j + 1)) * 3 + colorIdx;
					x02 = (i * Larg + (j + 2)) * 3 + colorIdx;
					x03 = (i * Larg + (j + 3)) * 3 + colorIdx;
					x04 = (i * Larg + (j + 4)) * 3 + colorIdx;

					x10 = ((i + 1) * Larg + j) * 3 + colorIdx;
					x11 = ((i + 1) * Larg + (j + 1)) * 3 + colorIdx;
					x12 = ((i + 1) * Larg + (j + 2)) * 3 + colorIdx;
					x13 = ((i + 1) * Larg + (j + 3)) * 3 + colorIdx;
					x14 = ((i + 1) * Larg + (j + 4)) * 3 + colorIdx;

					x20 = ((i + 2) * Larg + j) * 3 + colorIdx;
					x21 = ((i + 2) * Larg + (j + 1)) * 3 + colorIdx;
					x22 = ((i + 2) * Larg + (j + 2)) * 3 + colorIdx;
					x23 = ((i + 2) * Larg + (j + 3)) * 3 + colorIdx;
					x24 = ((i + 2) * Larg + (j + 4)) * 3 + colorIdx;

					x30 = ((i + 3) * Larg + j) * 3 + colorIdx;
					x31 = ((i + 3) * Larg + (j + 1)) * 3 + colorIdx;
					x32 = ((i + 3) * Larg + (j + 2)) * 3 + colorIdx;
					x33 = ((i + 3) * Larg + (j + 3)) * 3 + colorIdx;
					x34 = ((i + 3) * Larg + (j + 4)) * 3 + colorIdx;

					x40 = ((i + 4) * Larg + j) * 3 + colorIdx;
					x41 = ((i + 4) * Larg + (j + 1)) * 3 + colorIdx;
					x42 = ((i + 4) * Larg + (j + 2)) * 3 + colorIdx;
					x43 = ((i + 4) * Larg + (j + 3)) * 3 + colorIdx;
					x44 = ((i + 4) * Larg + (j + 4)) * 3 + colorIdx;

					ImrgbPtr[x00] = (int)((1 * ImrgbPtr[x00] + 4 * ImrgbPtr[x01] + 6 * ImrgbPtr[x02] + 4 * ImrgbPtr[x03] + 1 * ImrgbPtr[x04]
						+ 4 * ImrgbPtr[x10] + 16 * ImrgbPtr[x11] + 24 * ImrgbPtr[x12] + 16 * ImrgbPtr[x13] + 4 * ImrgbPtr[x14]
						+ 6 * ImrgbPtr[x20] + 24 * ImrgbPtr[x21] + 36 * ImrgbPtr[x22] + 24 * ImrgbPtr[x23] + 6 * ImrgbPtr[x24]
						+ 4 * ImrgbPtr[x30] + 16 * ImrgbPtr[x31] + 24 * ImrgbPtr[x32] + 16 * ImrgbPtr[x33] + 4 * ImrgbPtr[x34]
						+ 1 * ImrgbPtr[x40] + 4 * ImrgbPtr[x41] + 6 * ImrgbPtr[x42] + 4 * ImrgbPtr[x43] + 1 * ImrgbPtr[x44]) / 256);
				}
			}
		}

	}
}
